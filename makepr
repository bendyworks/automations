#!/usr/bin/env ruby

require 'octokit'
require 'tracker_api'
require 'git'
require 'active_support'

require 'openssl'
require 'optparse'

DEFAULT_ENDPOINT = "api.github.com"
DEFAULT_REMOTE = "origin"

class Worder
  extend ActiveSupport::Inflector
end

PIVOTAL_TOKEN = ENV['PIVOTAL_TOKEN']

def gh_client
  @client ||= Octokit::Client.new(access_token: @opts[:access_key])
end

def git_wrapper
  @git_wrapper ||= Git.open('.')
end

def pivotal_client
  @pivotal_client ||= TrackerApi::Client.new(token: PIVOTAL_TOKEN)
end

def story_for_branch
  return nil unless has_story_at_branch_end
  branch = git_wrapper.current_branch
  story_num = (branch.scan(/(\d+)$/).first || []).first
  puts "looking for story #{story_num} (#{story_num.to_i})"
  begin
    story = pivotal_client.story(story_num.to_i)
  rescue TrackerApi::Error => e
    puts e.inspect
    exit 1
  end

  story
end

def has_story_at_branch_end
  branch = git_wrapper.current_branch
  (branch.scan(/(\d+)$/).first || []).first.to_i != 0
end

def branch_to_title
  Worder.humanize git_wrapper.current_branch.gsub(/(\d+)$/,'(#\1)')
end

def get_target_repo
  r = git_wrapper.remotes.find{|remote| remote.name == @opts[:remote]}
  r.url.gsub(/git@.*\.com:(.*)\.git/,'\1')
end

def default_branch(repo = get_target_repo)
  gh_client.repo(repo).default_branch
end

def make_pr(repo: get_target_repo, story: story_for_branch, base: default_branch, title: branch_to_title,
            body: nil, endpoint: DEFAULT_ENDPOINT, ignore_cert_errors: false, remote: DEFAULT_ENDPOINT, access_key: nil,
            username: nil,
            options: {})
  body ||= ""
  if story
    body = <<-EOS
[Pivotal Story](#{story.url})
    EOS
  end

  current_branch = git_wrapper.current_branch

  msg = <<-MSG
  Creating PR

  to #{repo} @ #{current_branch}
  to #{remote} @ #{default_branch}

  ---
  #{title}

  #{body}
  MSG

  puts msg

  if username
    pr_head = "#{username}:#{git_wrapper.current_branch}"
  else
    pr_head = git_wrapper.current_branch
  end

  pr = gh_client.create_pull_request(repo, base, pr_head, title, body, options)
  "https://github.com/#{repo}/pull/#{pr.number}"
end

def update_pivotal(pr_url, story = story_for_branch)
  mark_finished_cmd = <<-CMD
  curl -X PUT -H "X-TrackerToken: #{PIVOTAL_TOKEN}" -H "Content-Type: application/json" \
  -d '{"current_state":"finished"}' \
  "https://www.pivotaltracker.com/services/v5/projects/#{story.project_id}/stories/#{story.id}"
  CMD

  note_cmd = <<-CMD
  curl -X POST -H "X-TrackerToken: #{PIVOTAL_TOKEN}" -H "Content-Type: application/json" \
  -d '{"text":"PR out: #{pr_url}"}' \
  "https://www.pivotaltracker.com/services/v5/projects/#{story.project_id}/stories/#{story.id}/comments"
  CMD

  unless story.story_type == 'chore'
    puts "marking #{story.id} as finished"
    puts `#{mark_finished_cmd}`
  end

  puts "posting link to PR"
  puts `#{note_cmd}`
end










body = ""
title = ""
endpoint = "api.github.com"
remote = "origin"
ignore_cert_errors = false
access_key = nil
username = nil

OptionParser.new do |o|
  o.on('-b', '--body BODY') { |b| body = b }
  o.on('-t', '--title TITLE') { |t| title = t }
  o.on('-e', '--endpoint ENDPOINT') { |e| endpoint = e }
  o.on('-r', '--remote REMOTE') { |r| remote = r }
  o.on('-k', '--gh-key Github Acccess Key') { |k| access_key = k }
  o.on('-u', '--user Github User Name') { |u| username = u }
  o.on('-i') { |i| ignore_cert_errors = true }
  o.on('-h') { puts o; exit }
  o.parse!
end

# if %w|--help -h|.include? ARGV[0]
#   puts <<-EOF
# Usage: makepr <title> <body>
#   EOF
#   exit 0
# end

@opts = {
  title: title,
  body: body,
  endpoint: endpoint,
  remote: remote,
  access_key: access_key,
  username: username,
  ignore_cert_errors: ignore_cert_errors
}

if has_story_at_branch_end
  unless PIVOTAL_TOKEN
    puts "no PIVOTAL_TOKEN env var defined!"
    exit 1
  end
end

if ignore_cert_errors
  OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE
end

Octokit.configure do |c|
  c.api_endpoint = "https://#{endpoint}/api/v3/"
end

pr_url = make_pr(@opts)

puts "PR created! (#{pr_url})"

if has_story_at_branch_end
  update_pivotal(pr_url)
end
